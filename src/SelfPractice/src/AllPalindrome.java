import java.util.ArrayList;
import java.util.Deque;
import java.util.LinkedList;
import java.util.List;

public class AllPalindrome {

    public static void main(String[] args) {

//        System.out.println(allPalindrome(new ArrayList<String>(), "", "nitin", false));
//        System.out.println(allPalindrome("nitin"));
        allPalPartitions("nitin");
    }


    private static void allPalPartitions(String input) {
        int n = input.length();

        // To Store all palindromic partitions
        ArrayList<ArrayList<String>> allPart = new ArrayList<>();

        // To store current palindromic partition
        Deque<String> currPart = new LinkedList<String>();

        // Call recursive function to generate
        // all partitions and store in allPart
        allPalPartitionsUtil(allPart, currPart, 0, n, input);

        // Print all partitions generated by above call
        for (ArrayList<String> strings : allPart) {
            for (String string : strings) {
                System.out.print(string + " ");
            }
            System.out.println();
        }

    }

    // Recursive function to find all palindromic
    // partitions of input[start..n-1] allPart --> A
    // ArrayList of Deque of strings. Every Deque
    // inside it stores a partition currPart --> A
    // Deque of strings to store current partition
    private static void allPalPartitionsUtil(ArrayList<ArrayList<String>> allPart,
                                             Deque<String> currPart, int start, int n, String input) {
        // If 'start' has reached len
        if (start >= n) {
            allPart.add(new ArrayList<>(currPart));
            return;
        }

        // Pick all possible ending points for substrings
        for (int i = start; i < n; i++) {

            // If substring str[start..i] is palindrome
            if (isPalindrome(input, start, i)) {

                // Add the substring to result
                currPart.addLast(input.substring(start, i + 1));

                // Recur for remaining remaining substring
                allPalPartitionsUtil(allPart, currPart, i + 1, n, input);

                // Remove substring str[start..i] from current
                // partition
                currPart.removeLast();
            }
        }
    }

    // A utility function to check
    // if input is Palindrome
    private static boolean isPalindrome(String input,
                                        int start, int i) {
        while (start < i) {
            if (input.charAt(start++) != input.charAt(i--))
                return false;
        }
        return true;
    }


    static List<String> allPalindrome(List<String> ans, String currStr, String s, Boolean flag) {

        if (isPalindrome(currStr)) {
            ans.add(currStr);
            flag = false;
        }

        int i = 0;
        currStr += s.charAt(i++);

        if (i < s.length())
            ans = allPalindrome(ans, currStr, s, flag);

        return ans;
    }

    static Boolean isPalindrome(String s) {
        if (s.length() == 1)
            return true;
        int start = 0;
        int end = s.length() - 1;
        while (start < end) {
            if (s.charAt(start++) != s.charAt(end--))
                return false;
        }
        return true;
    }

    static List<String> allPalindrome(String s) {
        List<String> ans = new ArrayList<>();
//        String currStr = "";
        int len = s.length();
        int j = 0;
        while (j < s.length()) {
            String currStr = "";
            for (int i = j; i < len; i++) {
                currStr += s.charAt(i);
                if (isPalindrome(currStr))
                    ans.add(currStr);
            }
            j++;
        }
        return ans;
    }
}
